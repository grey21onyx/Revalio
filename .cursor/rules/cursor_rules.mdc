---
description: Guidelines for creating and maintaining Cursor rules to ensure consistency and effectiveness.
globs: .cursor/rules/*.mdc
alwaysApply: true
---
# Comprehensive Code Development and Maintenance Guide

## Table of Contents
1. @Fundamental Principles
2. @Document Structure and Rules
3. @Code Development
4. @Development Workflow
5. @Analysis and Planning
6. @Code Maintenance
7. @Continuous Improvement
8. @Testing and Verification
9. @Dependency Management
10. @Modern De Pr1. @Communication and Collaborationd Future Technologies

## Fundames

### Core Development Philosophy
- **Write clean, simple, readable code**
  - Focus on clarity over cleverness
  - Optimize for readability and maintainability
- **Implement features in the simplest possible way**
  - Avoid over-engineering solutions
  - Follow the YAGNI principle (You Aren't Gonna Need It)
- **Keep files small and focused (<200 lines)**
  - Each file should have a single responsibility
  - Break large files into smaller, more manageable components
- **Test after every meaningful change**
  - Write tests that verify the expected behavior
  - Ensure all edge cases are covered
- **Focus on core functionality before optimization**
  - Get the basic functionality working first
  - Optimize only when necessary and with measurements
- **Use clear, consistent naming**
  - Names should reveal intent and purpose
  - Follow established naming conventions for the language/framework
- **Think thoroughly before coding**
  - Write 2-3 reasoning paragraphs before implementation
  - Plan your approach and consider alternatives
- **Always write simple, clean and modular code**
  - Break complex problems into smaller, manageable pieces
  - Create reusable components and functions
- **Use clear and easy-to-understand language**
  - Write in short sentences
  - Avoid jargon unless necessary
- **Always respond in Indonesia (combine with English for better language when communicating)**
  - This applies to communication with users/stakeholders

### Processing Approach
- **Break problems into smaller, manageable components**
  - Apply the Single Responsibility Principle
  - Each component should do one thing well
- **Define interfaces and data contracts first**
  - Establish clear boundaries between components
  - Document expected inputs and outputs
- **Clearly define relationships between components**
  - Map dependencies and interactions
  - Use diagrams when helpful
- **Document design assumptions and constraints**
  - Make implicit knowledge explicit
  - Highlight limitations and edge cases

### Iterative Development
- **Start with simple, functional implementations**
  - Create a minimal viable solution first
  - Build incrementally on a solid foundation
- **Add features gradually as needed**
  - Implement core functionality before nice-to-haves
  - Prioritize based on user needs and business value
- **Refactor regularly to improve design**
  - Clean up technical debt as you go
  - Improve code structure when patterns emerge
- **Review design assumptions after implementation**
  - Validate initial assumptions against reality
  - Adjust approach based on lessons learned

## Document Structure and Rules

### Standard Rules Format
```markdown
---
description: Brief description of what this rule enforces
globs: path/to/files/*.ext, other/path/**/*
alwaysApply: boolean
---

- **Main Points in Bold**
  - Sub-points with details
  - Examples and explanations
```

### File References
- **Use consistent formats when referencing files in the project**
  - Provide full paths for clarity
  - Use consistent formatting for file references
- **Provide relevant code examples when referring to specific files**
  - Include line numbers when relevant
  - Highlight the specific parts being referenced

### Code Examples
- **Use language-specific code blocks**
  - Specify the language for proper syntax highlighting
  - Format code consistently

```typescript
// ✅ DO: Show good examples
const goodExample = true;

// ❌ DON'T: Show anti-patterns
const badExample = false;
```

### Rule Content Guidelines
- **Start with high-level overview**
  - Provide context and purpose
  - Explain why the rule exists
- **Include specific, actionable requirements**
  - Be clear about what is expected
  - Avoid ambiguity
- **Show examples of correct implementation**
  - Demonstrate the rule in practice
  - Include multiple examples for complex rules
- **Reference existing code when possible**
  - Point to real-world examples in the codebase
  - Show how the rule is applied in context
- **Keep rules DRY by cross-referencing related rules**
  - Avoid duplication across rules
  - Link to related rules for additional context

### Rule Maintenance
- **Update rules when new patterns emerge**
  - Keep rules current with evolving practices
  - Add new examples as they arise
- **Add examples from actual codebase**
  - Use real code rather than theoretical examples
  - Update examples as the codebase evolves
- **Remove outdated patterns**
  - Deprecate rules that no longer apply
  - Document why rules were removed
- **Cross-reference related rules**
  - Create a network of related guidelines
  - Ensure consistency across rules

### Best Practices
- **Use bullet points for clarity**
  - Break complex ideas into digestible points
  - Use hierarchical structure for related points
- **Keep descriptions concise**
  - Get to the point quickly
  - Avoid unnecessary verbosity
- **Include both DO and DON'T examples**
  - Show both correct and incorrect approaches
  - Explain why certain approaches are preferred
- **Reference actual code over theoretical examples**
  - Ground rules in real-world scenarios
  - Use examples from the current codebase
- **Use consistent formatting across rules**
  - Maintain a uniform style
  - Make rules easy to scan and understand

## Code Development

### Error Fixing
- **DO NOT JUMP TO CONCLUSIONS!**
  - Consider multiple possible causes before deciding
  - Investigate thoroughly before implementing fixes
- **Explain the problem in plain English**
  - Describe what's happening in simple terms
  - Clarify the expected vs. actual behavior
- **Make minimal necessary changes**
  - Change as few lines of code as possible
  - Focus on fixing the root cause, not symptoms
- **For strange errors, perform web searches**
  - Find the latest up-to-date information
  - Learn from others who encountered similar issues
- **Test fixes thoroughly before considering the issue resolved**
  - Verify the fix works in all scenarios
  - Check for unintended side effects

### Building Process
- **Verify each new feature works**
  - Tell the user how to test it
  - Provide clear steps to validate functionality
- **DO NOT write complicated and confusing code**
  - Opt for the simple & modular approach
  - Choose clarity over cleverness
- **When unsure what to do, perform web research**
  - Look for established patterns and solutions
  - Learn from community best practices
- **Implement one feature at a time**
  - Complete and verify before moving to the next
  - Avoid working on multiple features simultaneously

### Comments
- **ALWAYS add helpful and explanatory comments**
  - Focus on the "why" not just the "what"
  - Explain complex logic and decisions
- **NEVER delete old comments unless obviously wrong/obsolete**
  - Preserve historical context
  - Update comments instead of removing them
- **Include extensive explanatory comments**
  - ALWAYS write well-documented code
  - Make code accessible to others
- **Document all changes and their reasoning IN THE COMMENTS**
  - Explain why changes were made
  - Note trade-offs and considerations
- **Use clear, easy-to-understand language in comments**
  - Write in short sentences
  - Avoid jargon unless necessary

## Development Workflow

### Standard Development Process
- **Initialize new projects with proper structure**
  - Set up configuration files and directory structure
  - Establish initial documentation
- **Start coding sessions by reviewing current tasks**
  - Understand status, priorities, and dependencies
  - Get a clear picture of what needs to be done
- **Determine the next task based on dependencies**
  - Ensure all prerequisites are completed
  - Follow the critical path
- **Analyze task complexity before breaking down**
  - Understand the scope and challenges
  - Identify potential risks and dependencies
- **Break complex tasks into smaller, manageable subtasks**
  - Create focused, achievable units of work
  - Define clear completion criteria
- **Implement code following task specifications**
  - Adhere to project standards and guidelines
  - Consider dependencies and constraints
- **Verify tasks according to test strategies**
  - Ensure functionality meets requirements
  - Test edge cases and error conditions
- **Update dependent tasks when implementation differs**
  - Communicate changes to affected components
  - Adjust related tasks as needed
- **Document progress and implementation notes**
  - Keep detailed records of decisions and approaches
  - Create a knowledge base for future reference
- **Maintain valid dependency structure**
  - Ensure tasks are completed in the correct order
  - Avoid circular dependencies

### Task Complexity Analysis
- **Run comprehensive analysis for complex tasks**
  - Evaluate technical complexity and dependencies
  - Identify potential risks and challenges
- **Review formatted complexity reports**
  - Understand the breakdown of complexity factors
  - Use insights to guide implementation approach
- **Focus on tasks with highest complexity scores (8-10)**
  - Prioritize breaking down complex tasks
  - Allocate more time and resources accordingly
- **Use analysis results to determine subtask allocation**
  - Distribute work based on complexity
  - Ensure appropriate expertise for challenging components

### Task Breakdown Process
- **Use systematic task expansion methods**
  - Follow consistent approaches to breaking down work
  - Create logical groupings of related subtasks
- **Specify the number of subtasks explicitly if needed**
  - Control granularity based on complexity
  - Ensure appropriate level of detail
- **Add research when necessary for expansion**
  - Investigate unfamiliar areas before implementation
  - Gather relevant information and examples
- **Clear existing subtasks if replacement is necessary**
  - Start fresh when approach changes significantly
  - Avoid mixing old and new approaches
- **Review and adjust generated subtasks as needed**
  - Ensure completeness and accuracy
  - Validate dependencies and sequencing

### Implementation Change Handling
- **Address significant deviations from planned approach**
  - Document reasons for changes
  - Update affected tasks and dependencies
- **Modify future tasks affected by current implementation**
  - Ensure consistency across the project
  - Prevent conflicts and integration issues
- **Update tasks when new dependencies or requirements emerge**
  - Reflect evolving understanding of the project
  - Keep task documentation current and accurate

### Task Status Management
- **Use 'pending' for tasks ready to be worked on**
  - All prerequisites are met
  - Task is ready for implementation
- **Use 'done' for completed and verified tasks**
  - Functionality is implemented and tested
  - All acceptance criteria are met
- **Use 'deferred' for postponed tasks**
  - Task is not currently prioritized
  - Will be revisited in the future
- **Add custom status values for project-specific workflows**
  - Tailor to team needs and processes
  - Ensure clear understanding of each status

## Analysis and Planning

### Design & Architecture Planning
1. **Task Analysis:**
   - Carefully examine requirements - scope, context, and constraints
   - Understand business objectives and user needs
   - Identify key technical challenges

2. **Information Gathering:**
   - Understand project structure
   - Examine relevant code, configurations, or documentation
   - Analyze code structure and relationships
   - Research similar solutions and patterns

3. **Design & Planning Execution:**
   - Design system architecture and component interactions
   - Plan implementation steps or identify necessary subtasks
   - Analyze technical feasibility and potential risks
   - Define interfaces, APIs, and data contracts
   - Review existing code/architecture against requirements

4. **Completion Reporting:**
   - Summarize design decisions and plans made
   - Document artifacts produced (diagrams, specifications)
   - Report completion status (success, failure, needs review)
   - Highlight significant findings and potential issues
   - Outline next steps and recommendations

5. **Issue Handling:**
   - For significant complexity, clearly state reasons and options
   - For failures (conflicting requirements, missing information), report clearly
   - Propose alternative approaches when appropriate

## Code Maintenance

### Iterative Implementation
1. **Understanding the Goal (Preparation):**
   - Thoroughly understand specific goals and requirements
   - Review related documentation and context

2. **Initial Exploration & Planning (Iteration 1):**
   - Create concrete implementation plan
   - Identify files, functions, and lines requiring modification
   - Determine intended code changes and locations
   - Gather all relevant details from exploration

3. **Document the Plan:**
   - Record complete findings from exploration phase
   - Include file paths, line numbers, proposed changes
   - Document reasoning and potential challenges
   - Create comprehensive implementation roadmap

4. **Verify the Plan:**
   - Confirm implementation plan is well-documented
   - Ensure all aspects are covered

5. **Begin Implementation:**
   - Set task status to 'in-progress'
   - Follow documented plan
   - Track progress against plan

6. **Refine and Document Progress (Iteration 2+):**
   - Address challenges and discover nuances
   - Review existing documentation before adding new information
   - Regularly update with new findings
   - Document what worked, what didn't, and why
   - Record code snippets, decisions, and deviations
   - Create implementation journey log for future reference

7. **Review & Update Rules (Post-Implementation):**
   - Review code changes and relevant discussions
   - Identify new patterns, conventions, or best practices
   - Create or update existing rules
   - Share learnings with the team

8. **Mark Task Complete:**
   - Verify implementation meets requirements
   - Ensure all documentation is updated
   - Set status to 'done'

9. **Commit Changes (If using Git):**
   - Stage relevant code changes and updated files
   - Create comprehensive commit message
   - Follow project commit conventions
   - Consider versioning documentation needs

10. **Proceed to Next Task:**
    - Identify next priority based on dependencies and project needs

### Code Analysis & Refactoring Techniques
- **Top-Level Function Search:**
  - Use grep/ripgrep to find exported functions/constants:
    `rg "export (async function|function|const) \w+"`
  - Compare functions between files during migrations
  - Identify potential naming conflicts and duplications
- **DRY Principle Application:**
  - Identify repeated logic and extract to shared functions
  - Create utilities for common operations
  - Maintain single sources of truth
- **Code Structure Improvement:**
  - Break large functions into smaller, focused ones
  - Extract complex logic into named helper functions
  - Improve naming for clarity and consistency

## Continuous Improvement

### Rule Improvement Triggers
- **New code patterns not covered by existing rules**
  - Emerging practices and conventions
  - Novel approaches to common problems
- **Repeated similar implementations across files**
  - Patterns that should be standardized
  - Opportunities for shared utilities
- **Common error patterns that could be prevented**
  - Recurring bugs and issues
  - Misunderstandings of APIs or frameworks
- **New libraries or tools being used consistently**
  - Best practices for specific technologies
  - Integration patterns and conventions
- **Emerging best practices in the codebase**
  - Successful approaches worth replicating
  - Team-developed solutions to common challenges

### Analysis Process
- **Compare new code with existing rules**
  - Identify gaps and inconsistencies
  - Note evolving patterns
- **Identify patterns that should be standardized**
  - Look for recurring solutions
  - Recognize opportunities for consistency
- **Look for references to external documentation**
  - Incorporate relevant external standards
  - Link to authoritative sources
- **Check for consistent error handling patterns**
  - Ensure uniform approach to errors
  - Standardize logging and reporting
- **Monitor test patterns and coverage**
  - Identify effective testing strategies
  - Promote comprehensive test coverage

### Rule Updates
- **Add New Rules When:**
  - A new technology/pattern is used in 3+ files
  - Common bugs could be prevented by a rule
  - Code reviews repeatedly mention the same feedback
  - New security or performance patterns emerge

- **Modify Existing Rules When:**
  - Better examples exist in the codebase
  - Additional edge cases are discovered
  - Related rules have been updated
  - Implementation details have changed

### Pattern Recognition Example
```typescript
// If you see repeated patterns like:
const data = await prisma.user.findMany({
  select: { id: true, email: true },
  where: { status: 'ACTIVE' }
});

// Consider adding to rules:
// - Standard select fields
// - Common where conditions
// - Performance optimization patterns
```

### Rule Quality Checks
- **Rules should be actionable and specific**
  - Provide clear guidance
  - Avoid vague recommendations
- **Examples should come from actual code**
  - Use real-world scenarios
  - Demonstrate practical application
- **References should be up to date**
  - Link to current documentation
  - Remove outdated information
- **Patterns should be consistently enforced**
  - Apply rules uniformly
  - Avoid contradictions between rules

### Continuous Improvement
- **Monitor code review comments**
  - Identify recurring feedback
  - Address common issues with rules
- **Track common development questions**
  - Document answers to frequent questions
  - Create rules to address confusion points
- **Update rules after major refactors**
  - Reflect new architectural approaches
  - Document lessons learned
- **Add links to relevant documentation**
  - Connect rules to authoritative sources
  - Provide context and background
- **Cross-reference related rules**
  - Create a coherent rule system
  - Highlight relationships between rules

### Rule Deprecation
- **Mark outdated patterns as deprecated**
  - Provide migration guidance
  - Explain why the pattern is no longer recommended
- **Remove rules that no longer apply**
  - Clean up outdated guidance
  - Prevent confusion
- **Update references to deprecated rules**
  - Maintain consistency across documentation
  - Direct to current recommendations
- **Document migration paths for old patterns**
  - Provide clear upgrade instructions
  - Support transition to new approaches

## Testing and Verification

### Testing Strategy
- **Verify functionality against requirements**
  - Ensure all acceptance criteria are met
  - Test both happy paths and edge cases
- **Test edge cases and boundary conditions**
  - Identify limits and constraints
  - Verify behavior at boundaries
- **Simulate various user inputs**
  - Test with valid and invalid data
  - Consider different user scenarios
- **Validate error handling and recovery**
  - Ensure graceful failure
  - Verify helpful error messages
- **Check compatibility across systems and browsers**
  - Test on target platforms
  - Verify consistent behavior

### Testing Coverage
- **Unit tests for individual functions and components**
  - Test in isolation
  - Mock dependencies
- **Integration tests for component interactions**
  - Verify correct communication
  - Test integration points
- **End-to-end tests for user workflows**
  - Simulate real user journeys
  - Validate complete processes
- **Performance tests for critical operations**
  - Measure response times
  - Identify bottlenecks
- **Security tests for potential vulnerabilities**
  - Check for common security issues
  - Validate input sanitization

### Test-Driven Development Approach
- **Write tests before implementation**
  - Define expected behavior first
  - Use tests as specifications
- **Use tests as functional specifications**
  - Document requirements through tests
  - Clarify edge cases and expectations
- **Refactor with confidence backed by tests**
  - Make changes safely
  - Verify no regressions
- **Increase test coverage over time**
  - Start with critical paths
  - Expand to cover edge cases

## Dependency Management

### Dependency Handling
- **Add dependencies to establish prerequisites**
  - Make one task dependent on another
  - Define clear task sequences
- **Remove dependencies when relationships change**
  - Update when prerequisites no longer apply
  - Maintain accurate dependency graph
- **Check for dependency issues**
  - Identify circular references
  - Find links to non-existent tasks
- **Automatically fix dependency problems**
  - Resolve circular dependencies
  - Clean up invalid references

### Task Structure and Fields
- **id**: Unique identifier for the task (Example: `1`, `1.1`)
- **title**: Brief, descriptive title (Example: `"Initialize Repo"`)
- **description**: Concise summary of task scope (Example: `"Create a new repository, set up initial structure."`)
- **status**: Current state (Example: `"pending"`, `"done"`, `"deferred"`)
- **dependencies**: IDs of prerequisite tasks (Example: `[1, 2.1]`)
- **priority**: Importance level (Example: `"high"`, `"medium"`, `"low"`)
- **details**: In-depth implementation instructions (Example: `"Use GitHub client ID/secret, handle callback, set session token."`)
- **testStrategy**: Verification approach (Example: `"Deploy and call endpoint to confirm 'Hello World' response."`)
- **subtasks**: List of smaller, more specific tasks

## Modern Development Practices

### Embracing Functional Programming
- **Simplify complex logic**
  - Break down problems into smaller, pure functions
  - Reduce side effects for more predictable code
- **Make code more predictable**
  - Use pure functions that always return the same output for the same input
  - Avoid mutable state when possible
- **Enhance readability**
  - Write declarative rather than imperative code
  - Use functions as building blocks for clear intent

### Adopting Industry-Specific Coding Practices
- **Tailor standards to fit your domain**
  - Recognize that different industries have different requirements
  - Adjust coding style to match industry priorities (security for finance, performance for games)
- **Meet business requirements**
  - Ensure code solves actual business problems
  - Align technical solutions with business goals
- **Align with user needs**
  - Focus on creating value for end users
  - Test with actual users when possible

### Focusing on Code Readability
- **Use clear naming conventions**
  - Choose descriptive names for variables and functions
  - Avoid abbreviations and single-letter variables except in standard cases
- **Structure code effectively**
  - Use consistent indentation and spacing
  - Group related code together
  - Break code into logical sections with comments
- **Avoid lengthy functions**
  - Keep functions under 20 lines when possible
  - Each function should do one thing well
  - Extract complex logic into helper functions

### Leveraging Modern Development Frameworks
- **Choose the right framework for your needs**
  - Consider project size, complexity, and team skills
  - Evaluate community support and documentation
- **Maximize framework efficiency**
  - Learn advanced features beyond basics
  - Use built-in components instead of custom solutions
  - Understand the framework's architecture and patterns
- **Stay updated with trends**
  - Follow framework releases and updates
  - Learn about new features and best practices
  - Experiment with new approaches in side projects

### Establishing Code Quality Standards
- **Implement coding rules**
  - Use linters and static analysis tools
  - Establish and enforce team standards
- **Ensure readability**
  - Write code that others can easily understand
  - Use comments to explain complex logic
- **Prioritize defect resolution**
  - Fix critical bugs immediately
  - Address major issues promptly
  - Schedule time for minor improvements

## Communication and Collaboration

### Collaborative Coding and Peer Reviews
- **Encourage team feedback**
  - Create a safe environment for sharing ideas
  - Use tools that facilitate code comments and discussions
  - Set clear guidelines for constructive feedback
- **Improve code quality through reviews**
  - Catch bugs early through additional perspectives
  - Share knowledge and alternative approaches
  - Learn from each other's techniques
- **Build a supportive culture**
  - Focus on the code, not the coder
  - Recognize good feedback and contributions
  - Learn from failures and celebrate successes

### Mastering Remote Collaboration
- **Use effective communication tools**
  - Choose appropriate platforms for different types of communication
  - Standardize on core tools to reduce context switching
  - Ensure all team members are comfortable with selected tools
- **Build trust across time zones**
  - Set clear expectations for availability and response times
  - Over-communicate when working asynchronously
  - Be reliable and follow through on commitments
- **Run effective virtual meetings**
  - Prepare and share agendas in advance
  - Keep meetings focused and time-boxed
  - Ensure everyone has a chance to participate
  - Record important decisions and action items

### Documentation Best Practices
- **Maintain comprehensive project documentation**
  - Document architecture decisions and rationale
  - Keep README files updated with setup and usage instructions
  - Document APIs and interfaces
- **Use consistent documentation formats**
  - Standardize structure across projects
  - Include examples and use cases
  - Update documentation when code changes
- **Make documentation accessible**
  - Store in easily accessible locations
  - Ensure searchability and discoverability
  - Use clear language and avoid jargon

## AI and Future Technologies

### Embracing AI-Powered Development
- **Leverage AI for code generation**
  - Use AI tools to generate boilerplate code
  - Get suggestions for code improvements
  - Automate repetitive coding tasks
- **Boost productivity with AI assistance**
  - Reduce development time through AI suggestions
  - Automate testing and code reviews
  - Use AI to predict potential bugs
- **Streamline debugging with AI**
  - Identify errors automatically
  - Get suggestions for fixes
  - Understand root causes of issues

### Adopting Emerging Technologies
- **Stay informed about new tools and frameworks**
  - Follow industry blogs and publications
  - Attend conferences and webinars
  - Participate in professional communities
- **Evaluate new technologies strategically**
  - Consider business value and team capabilities
  - Test new technologies in controlled environments
  - Balance innovation with stability
- **Plan for technology evolution**
  - Design systems with flexibility for future changes
  - Document technology choices and rationale
  - Regularly review and update technology stack

### Continuous Learning and Adaptation
- **Allocate time for learning and experimentation**
  - Set aside dedicated time for exploring new technologies
  - Create learning objectives and track progress
  - Share knowledge with the team
- **Build a culture of innovation**
  - Encourage experimentation and creative solutions
  - Recognize and reward learning and improvement
  - Create safe spaces for trying new approaches
- **Develop adaptability skills**
  - Embrace change as a constant
  - Focus on fundamental principles that transcend specific technologies
  - Build transferable skills that apply across domains
